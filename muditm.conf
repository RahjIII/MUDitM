# MUDitM - MUD in the Middle config file

[muditm]
# ########################
# demon = false means run for one connection and terminate.  True will fork a
# new process for every proxied connection and keep the initial listening
# process active.
demon = true

# listen is the port number to listen on for clients.  Muditm listens with both
# IPv4 and IPv6 on the specififed port.
listen = 4443

# if set, log-file is the full path to where muditm should write its logs.  If
# unset, logs go to stderr.
#
# log-file = /var/log/muditm.log
log-file = 

# newenv_ipaddress is a ; seperated list of environment variable names that
# the client's source address should be reported through.  The recommened
# variable for MNES and MTTS compatibility is IPADDRESS. 
#
# newenv_ipaddress = IPADDRESS;ProxiedHost
newenv_ipaddress = IPADDRESS

# stunnelproxy adds the stunnel "human readable version 1" proxy reporting
# method to the opening of the game side connection.
#
# stunnelproxy = false
stunnelproxy = true

[ssl]
# ########################
# certificate, keyfile, and authority certificate chain for SSL sessions.  For
# LetsEncrypt keys, you need to define all of these.  For a simple self-signed
# pair, you can comment out the chain.
#
# cert = cert.pem
# key = key.pem
# chain = fullchain.pem
cert = cert.pem
key = key.pem
chain = fullchain.pem

[game]
# ########################
# host is the host name or address of the game server.  It does not have to be
# local!
#
# service is a port number or service name from /etc/services. 
#
# security is either SSL or none
#
# compression is ignore, disable or enable
#
#  ignore: MCCPx Negotiations are forwarded across the proxy.  MUDitM looks for
#  the start of compression.  If compression begins, MUDitM stops inspecting
#  for paterns, and will be unable to intercept MNES for variable insertion.
#
#  disable: Intercept MCCPx offer, respond in the negative to disable MCCPx,
#  and do not pass the offer through to the other side.
#
#  enable: On game side, will accept offer to be an MCCP2 client, and will
#  decompress the game's stream for pattern matching and MNES insertion.  On
#  client side, will offer to act as MCCP2 server and will send a compressed
#  stream if client requests one.
#
host = ::
service = 4000
security = none
compression = enable

[client]
# ########################
# security is either SSL or none
#
# compression is ignore, disable or enable, as described above.
# 
security = SSL
compression = enable
